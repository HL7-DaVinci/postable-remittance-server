package org.hl7.davinci.pr.api.utils;

import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import lombok.experimental.UtilityClass;
import org.hl7.davinci.pr.domain.ClaimQuery;
import org.hl7.davinci.pr.domain.Patient;
import org.hl7.davinci.pr.domain.Payer;
import org.hl7.davinci.pr.domain.Payment;
import org.hl7.davinci.pr.domain.Remittance;
import org.hl7.fhir.r4.model.CodeType;
import org.hl7.fhir.r4.model.DateTimeType;
import org.hl7.fhir.r4.model.DateType;
import org.hl7.fhir.r4.model.IntegerType;
import org.hl7.fhir.r4.model.Money;
import org.hl7.fhir.r4.model.Parameters;
import org.hl7.fhir.r4.model.Parameters.ParametersParameterComponent;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;

@UtilityClass
public class ApiUtils {

  public final static SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);

  /**
   * Generates a FHIR Parameters resource that can be used to search for a claim by provider claim ID.
   *
   * @param tin the tin
   * @param dateOfServiceStart the start date of the date of service period
   * @param dateOfServiceEnd the end date of the date of service period
   * @param patientId the subscriber/patientID assigned by payer
   * @param providerClaimId the claim ID as assigned by provider
   * @param providerId the provider ID
   * @param payerClaimId the claim ID generated by payer
   * @param claimChargeAmount the charge amount of the claim
   * @param payerId the payer ID
   * @param payerName the payer name
   * @return the FHIR Parameters resource
   */
  public Parameters generateSearchByClaimRequestResource(String tin, String dateOfServiceStart, String dateOfServiceEnd,
      String patientId, String providerClaimId, String providerId, String payerClaimId, String claimChargeAmount,
      String payerId, String payerName) {
    Parameters requestResource = new Parameters();
    ValidationUtils.validateTin(tin);
    requestResource.addParameter(ApiConstants.TIN, new StringType(tin));

    Period period = new Period();
    if (dateOfServiceStart != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceStart);
      period.setStartElement(new DateTimeType(dateOfServiceStart));
    }
    if (dateOfServiceEnd != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceEnd);
      period.setEndElement(new DateTimeType(dateOfServiceEnd));
    }
    // Do not add period if BOTH start and end dates are null
    if (!(dateOfServiceStart == null && dateOfServiceEnd == null)) {
      ValidationUtils.validatePeriod(period);
      requestResource.addParameter(ApiConstants.DATE_OF_SERVICE, period);
    }

    if (patientId != null) {
      requestResource.addParameter(ApiConstants.PATIENT_ID, new StringType(patientId));
    }

    // Claim parameters with slice of part
    ValidationUtils.validateProviderClaimId(providerClaimId);
    requestResource.addParameter().setName(ApiConstants.CLAIM).addPart()
        .setName(ApiConstants.PROVIDER_CLAIM_ID)
        .setValue(new StringType(providerClaimId));

    if (providerId != null) {
      requestResource.getParameter(ApiConstants.CLAIM).addPart()
          .setName(ApiConstants.PROVIDER_ID)
          .setValue(new StringType(providerId));
    }
    if (payerClaimId != null) {
      requestResource.getParameter(ApiConstants.CLAIM).addPart()
          .setName(ApiConstants.PAYER_CLAIM_ID)
          .setValue(new StringType(payerClaimId));
    }
    if (claimChargeAmount != null) {
      requestResource.getParameter(ApiConstants.CLAIM).addPart()
          .setName(ApiConstants.CLAIM_CHARGE_AMOUNT)
          .setValue(new StringType(claimChargeAmount));
    }

    if (payerId != null) {
      requestResource.addParameter(ApiConstants.PAYER_ID, new StringType(payerId));
    }
    if (payerName != null) {
      requestResource.addParameter(ApiConstants.PAYER_NAME, new StringType(payerName));
    }

    return requestResource;
  }

  /**
   * Generates a FHIR Parameters resource that can be used to search for a claim by patient information.
   *
   * @param tin the tin
   * @param dateOfServiceStart the start date of the date of service period
   * @param dateOfServiceEnd the end date of the date of service period
   * @param payerId the payer ID
   * @param payerName the payer name
   * @param patientId the subscriber/patientID assigned by payer
   * @param patientDob the date of birth of the patient
   * @param patientFirstName the first name of the patient
   * @param patientLastName the last name of the patient
   * @return the FHIR Parameters resource
   */
  public Parameters generateSearchByPatientRequestResource(String tin, String dateOfServiceStart,
      String dateOfServiceEnd, String payerId, String payerName, String patientId, String patientDob,
      String patientFirstName, String patientLastName) {

    Parameters requestResource = new Parameters();
    ValidationUtils.validateTin(tin);
    requestResource.addParameter(ApiConstants.TIN, new StringType(tin));

    Period period = new Period();
    if (dateOfServiceStart != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceStart);
      period.setStartElement(new DateTimeType(dateOfServiceStart));
    }
    if (dateOfServiceEnd != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceEnd);
      period.setEndElement(new DateTimeType(dateOfServiceEnd));
    }
    // Do not add period if BOTH start and end dates are null
    if (!(dateOfServiceStart == null && dateOfServiceEnd == null)) {
      ValidationUtils.validatePeriod(period);
      requestResource.addParameter(ApiConstants.DATE_OF_SERVICE, period);
    }

    if (payerId != null) {
      requestResource.addParameter(ApiConstants.PAYER_ID, new StringType(payerId));
    }
    if (payerName != null) {
      requestResource.addParameter(ApiConstants.PAYER_NAME, new StringType(payerName));
    }

    // Patient parameters with slice of part
    ValidationUtils.validatePatientId(patientId);
    requestResource.addParameter().setName(ApiConstants.PATIENT).addPart()
        .setName(ApiConstants.PATIENT_ID)
        .setValue(new StringType(patientId));

    ValidationUtils.validateDateOfBirthFormat(patientDob);
    requestResource.getParameter(ApiConstants.PATIENT).addPart()
        .setName(ApiConstants.DATE_OF_BIRTH)
        .setValue(new DateType(patientDob));

    if (patientFirstName != null) {
      requestResource.getParameter(ApiConstants.PATIENT).addPart()
          .setName(ApiConstants.PATIENT_FIRST_NAME)
          .setValue(new StringType(patientFirstName));
    }
    if (patientLastName != null) {
      requestResource.getParameter(ApiConstants.PATIENT).addPart()
          .setName(ApiConstants.PATIENT_LAST_NAME)
          .setValue(new StringType(patientLastName));
    }

    return requestResource;
  }


  /**
   * Generates a FHIR Parameters for Search by Claim response that contains the claim details along with associated patient, payer, payment, and remittance information.
   *
   * @param tin the tin
   * @param claimQueries the list of claim queries
   * @param patients the list of patients
   * @param payers the list of payers
   * @param payments the list of payments
   * @param remittances the list of remittances
   * @return the FHIR Parameters resource containing the claim details
   */
  public static Parameters generateSearchByClaimOrPatientResponse(String tin, List<ClaimQuery> claimQueries,
      List<Patient> patients, List<Payer> payers, List<Payment> payments, List<Remittance> remittances) {
    Parameters outputParameters = new Parameters();
    outputParameters.setId(
        ApiConstants.SEARCH_RESPONSE_RESOURCE_ID);
    outputParameters.setMeta(
        FhirUtils.generateResourceMeta(ApiConstants.SEARCH_BY_CLAIM_PATIENT_RESPONSE_META_PROFILE_URL));

    // TIN
    outputParameters.addParameter(ApiConstants.TIN, new StringType(tin));

    // Payer
    for (Payer payer : payers) {
      ParametersParameterComponent payerComponent = new ParametersParameterComponent();
      payerComponent.setName(ApiConstants.PAYER);
      payerComponent.addPart().setName(ApiConstants.PAYER_ID)
          .setValue(new StringType(payer.getPayerIdentity()));
      payerComponent.addPart().setName(ApiConstants.PAYER_NAME)
          .setValue(new StringType(payer.getPayerName()));
      // Add payer component to outputParameters
      outputParameters.addParameter(payerComponent);
    }

    // Claim and Payment will be together
    Iterator<ClaimQuery> claimQueryIterator = claimQueries.iterator();
    Iterator<Payment> paymentIterator = payments.iterator();
    Payment payment = null;
    while (claimQueryIterator.hasNext()) {
      ClaimQuery claimQuery = claimQueryIterator.next();

      // If there are multiple claims but only one payment, the payment will be added to all claims
      if (paymentIterator.hasNext()) {
        payment = paymentIterator.next();
      }

      // Claim
      ParametersParameterComponent claimComponent = new ParametersParameterComponent();
      claimComponent.setName(ApiConstants.CLAIM);
      claimComponent.addPart().setName(ApiConstants.PROVIDER_CLAIM_ID)
          .setValue(new StringType(claimQuery.getProviderClaimID()));
      claimComponent.addPart().setName(ApiConstants.CLAIM_RECEIVED_DATE)
          .setValue(FhirUtils.generateDateType(claimQuery.getReceivedDate()));
      claimComponent.addPart().setName(ApiConstants.PROVIDER_ID)
          .setValue(new StringType(claimQuery.getProviderNPI()));
      claimComponent.addPart().setName(ApiConstants.PAYER_CLAIM_ID)
          .setValue(new StringType(claimQuery.getPayerClaimId()));

      // Payment
      ParametersParameterComponent paymentComponent = new ParametersParameterComponent();
      paymentComponent.setName(ApiConstants.PAYMENT_INFO);
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_DATE)
          .setValue(FhirUtils.generateDateType(payment.getPayment_issue_dt()));
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_NUMBER)
          .setValue(new StringType(payment.getPaymentNumber()));
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_AMOUNT)
          .setValue(new Money().setValue(payment.getAmount()).setCurrency(ApiConstants.PAYMENT_CURRENCY));

      // Add payment to the claimComponent
      claimComponent.addPart(paymentComponent);

      // Add claim to outputParameters
      outputParameters.addParameter(claimComponent);
    }

    // Patients
    for (Patient patient : patients) {
      ParametersParameterComponent patientComponent = new ParametersParameterComponent();
      patientComponent.setName(ApiConstants.PATIENT);
      patientComponent.addPart().setName(ApiConstants.DATE_OF_BIRTH)
          .setValue(FhirUtils.generateDateType(patient.getDateOfBirth()));
      patientComponent.addPart().setName(ApiConstants.PATIENT_ID)
          .setValue(new StringType(patient.getId().toString()));
      patientComponent.addPart().setName(ApiConstants.PATIENT_FIRST_NAME)
          .setValue(new StringType(patient.getFirstName()));
      patientComponent.addPart().setName(ApiConstants.PATIENT_LAST_NAME)
          .setValue(new StringType(patient.getLastName()));
      // Add the patient to outputParameters
      outputParameters.addParameter(patientComponent);
    }

    // Remittances
    for (Remittance remittance : remittances) {
      ParametersParameterComponent remittanceComponent = new ParametersParameterComponent();
      remittanceComponent.setName(ApiConstants.REMITTANCE);
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_IDENTIFIER)
          .setValue(new StringType(remittance.getRemittanceAdviceId()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_TYPE)
          .setValue(new CodeType(remittance.getRemittanceAdviceType()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_DATE)
          .setValue(FhirUtils.generateDateType(remittance.getRemittanceAdviceDate()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_FILE_SIZE)
          .setValue(new IntegerType(remittance.getRemittanceAdviceFileSize()));
      // Add the remittance to the outputParameters
      outputParameters.addParameter(remittanceComponent);
    }
    return outputParameters;
  }

  /**
   * Generates a FHIR Parameters resource that can be used to search by payment information.
   *
   * @param tin the tin
   * @param dateOfServiceStart the start date of the date of service period
   * @param dateOfServiceEnd the end date of the date of service period
   * @param payerId the payer ID
   * @param payerName the payer name
   * @param paymentIssueDateStart the start date of the payment issue date period
   * @param paymentIssueDateEnd the end date of the payment issue date period
   * @param paymentAmountLow the low value of the payment amount range
   * @param paymentAmountHigh the high value of the payment amount range
   * @param paymentNumber the payment number
   * @return the FHIR Parameters resource containing the payment search criteria
   */
  public Parameters generateSearchByPaymentRequestResource(String tin, String dateOfServiceStart,
      String dateOfServiceEnd, String payerId, String payerName, String paymentIssueDateStart,
      String paymentIssueDateEnd, String paymentAmountLow, String paymentAmountHigh, String paymentNumber) {

    Parameters requestResource = new Parameters();
    ValidationUtils.validateTin(tin);
    requestResource.addParameter(ApiConstants.TIN, new StringType(tin));

    Period period = new Period();
    if (dateOfServiceStart != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceStart);
      period.setStartElement(new DateTimeType(dateOfServiceStart));
    }
    if (dateOfServiceEnd != null) {
      ValidationUtils.validateDateOfServiceFormat(dateOfServiceEnd);
      period.setEndElement(new DateTimeType(dateOfServiceEnd));
    }
    // Do not add period if BOTH start and end dates are null
    if (!(dateOfServiceStart == null && dateOfServiceEnd == null)) {
      ValidationUtils.validatePeriod(period);
      requestResource.addParameter(ApiConstants.DATE_OF_SERVICE, period);
    }

    // Payment parameters with slice of part
    requestResource.addParameter().setName(ApiConstants.PAYMENT);

    // Date of Service - required
    ValidationUtils.validateDateOfServiceFormat(paymentIssueDateStart);
    ValidationUtils.validateDateOfServiceFormat(paymentIssueDateEnd);
    Period paymentPeriod = new Period();
    paymentPeriod.setStartElement(new DateTimeType(paymentIssueDateStart));
    paymentPeriod.setEndElement(new DateTimeType(paymentIssueDateEnd));
    ValidationUtils.validatePeriod(paymentPeriod);
    // Add to Payment part
    requestResource.getParameter(ApiConstants.PAYMENT).addPart()
        .setName(ApiConstants.PAYMENT_ISSUE_DATE)
        .setValue(paymentPeriod);

    if (paymentAmountLow != null && paymentAmountHigh != null) {
      ParametersParameterComponent paymentAmountComponent = new ParametersParameterComponent();
      paymentAmountComponent.setName(ApiConstants.PAYMENT_AMOUNT);
      paymentAmountComponent.addPart().setName(ApiConstants.PAYMENT_AMOUNT_LOW).setValue(
          new Money().setValue(Float.parseFloat(paymentAmountLow)).setCurrency(ApiConstants.PAYMENT_CURRENCY));
      paymentAmountComponent.addPart().setName(ApiConstants.PAYMENT_AMOUNT_HIGH).setValue(
          new Money().setValue(Float.parseFloat(paymentAmountHigh)).setCurrency(ApiConstants.PAYMENT_CURRENCY));
      // Add to payment part
      requestResource.getParameter(ApiConstants.PAYMENT).addPart(paymentAmountComponent);
    }

    // Payment number - required
    ValidationUtils.validatePaymentNumber(paymentNumber);
    requestResource.getParameter(ApiConstants.PAYMENT).addPart()
        .setName(ApiConstants.PAYMENT_NUMBER)
        .setValue(new StringType(paymentNumber));

    if (payerId != null) {
      requestResource.addParameter(ApiConstants.PAYER_ID, new StringType(payerId));
    }
    if (payerName != null) {
      requestResource.addParameter(ApiConstants.PAYER_NAME, new StringType(payerName));
    }
    return requestResource;
  }

  /**
   * Generates a FHIR Parameters for Search by Payment response that contains the payment details along with associated payer and remittance information.
   *
   * @param tin the tin
   * @param payers the list of payers
   * @param payments the list of payments
   * @param remittances the list of remittances
   * @return the FHIR Parameters resource containing the payment details
   */
  public static Parameters generateSearchByPaymentResponse(String tin, List<Payer> payers, List<Payment> payments,
      List<Remittance> remittances) {
    Parameters outputParameters = new Parameters();
    outputParameters.setId(ApiConstants.SEARCH_RESPONSE_RESOURCE_ID);
    outputParameters.setMeta(
        FhirUtils.generateResourceMeta(ApiConstants.SEARCH_BY_PAYMENT_RESPONSE_META_PROFILE_URL));
    // TIN
    outputParameters.addParameter(ApiConstants.TIN, new StringType(tin));

    // Payer
    for (Payer payer : payers) {
      ParametersParameterComponent payerComponent = new ParametersParameterComponent();
      payerComponent.setName(ApiConstants.PAYER);
      payerComponent.addPart().setName(ApiConstants.PAYER_ID)
          .setValue(new StringType(payer.getPayerIdentity()));
      payerComponent.addPart().setName(ApiConstants.PAYER_NAME)
          .setValue(new StringType(payer.getPayerName()));
      // Add payer component to outputParameters
      outputParameters.addParameter(payerComponent);
    }

    // Payment
    for (Payment payment : payments) {
      ParametersParameterComponent paymentComponent = new ParametersParameterComponent();
      paymentComponent.setName(ApiConstants.PAYMENT);
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_ISSUE_DATE)
          .setValue(FhirUtils.generateDateType(payment.getPayment_issue_dt()));
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_NUMBER)
          .setValue(new StringType(payment.getPaymentNumber()));
      paymentComponent.addPart().setName(ApiConstants.PAYMENT_AMOUNT)
          .setValue(new Money().setValue(payment.getAmount()).setCurrency(ApiConstants.PAYMENT_CURRENCY));
      // Add payment to the outputParameters
      outputParameters.addParameter(paymentComponent);
    }

    // Remittances
    for (Remittance remittance : remittances) {
      ParametersParameterComponent remittanceComponent = new ParametersParameterComponent();
      remittanceComponent.setName(ApiConstants.REMITTANCE);
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_IDENTIFIER)
          .setValue(new StringType(remittance.getRemittanceAdviceId()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_TYPE)
          .setValue(new CodeType(remittance.getRemittanceAdviceType()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_DATE)
          .setValue(FhirUtils.generateDateType(remittance.getRemittanceAdviceDate()));
      remittanceComponent.addPart().setName(ApiConstants.REMITTANCE_ADVICE_FILE_SIZE)
          .setValue(new IntegerType(remittance.getRemittanceAdviceFileSize()));
      // Add the remittance to the outputParameters
      outputParameters.addParameter(remittanceComponent);
    }
    return outputParameters;
  }
}
